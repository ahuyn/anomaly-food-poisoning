
local poison_level = 0
local food_queue = {}
local cache = {}
local TICK_DELAY = 6 -- 6 in game seconds or 1 irl second
get_config = food_poison_mcm.get_config

function print_dbg(text, ...) 
    if get_config("dev") then
		printf("fp | %s | " .. text, time_global(), ...)
	end
end

function add_to_queue(id, values)
    if not food_queue[id] then food_queue[id] = dup_table(values) end
end

local prev_time
function update()

    local curr_time = game.get_game_time()
    if (prev_time == nil) then prev_time = curr_time end
    
    if (curr_time:diffSec(prev_time) > TICK_DELAY) then
        prev_time = curr_time
        process_queue()
        process_status()
    end

end

-- iterate queue and update poison level as appropriate
function process_queue()
    local to_apply = -0.001 -- base decay over time
    if not is_empty(food_queue) then
        for k,v in pairs(food_queue) do
            if v.ticks > 0 then
                v.ticks = v.ticks - 1
                to_apply = to_apply + v.amt
            else
                print_dbg("evicted from queue")
                food_queue[k] = nil 
                report_poisoning()
            end
        end
    end
    poison_level = clamp(poison_level + to_apply, 0, 1000)
end

function add_to_queue(id, ticks, amt)
    food_queue[id] = {}
    food_queue[id].ticks = ticks
    food_queue[id].amt = amt
    return true
end

local current_level = -1
-- return level of food poisoning, 0-5

function determine_level()
    if poison_level < 100 then return 0 end
    local lv = clamp(poison_level - 100, 0, 1000)
    lv = math.floor(lv / 200)
    return lv + 1
end

local thirst_levels = {
    40, --lv1
    60, --lv2
    90, --lv3
    130, --lv4
    130, --lv5
}
function set_dehydration(lv)
    if lv > 0 then
        actor_status_thirst.set_thirst_tick(thirst_levels[lv])
    else
        actor_status_thirst.reset_thirst_tick()
    end
end

local is_fatal = false
local damage_levels = {
    -0.0005, -- lv1
    -0.0015,
    -0.005,
    -0.01,
    -0.01
}
function set_damage(lv)
    if lv == 5 then is_fatal = true
    else is_fatal = false end
end

local speed_levels = {
    0.9, --lv2
    0.85,
    0.85,
    0.8
}
function set_speed(lv)
    if lv > 1 then
        speed.add_speed("sickness", speed_levels[lv - 1], false, true)
    else
        speed.remove_speed("sickness")
    end
end

function set_ppe(lv)
    if lv == 0 then    
       level.remove_pp_effector(42069)
    elseif lv == 1 then
        -- blur
        level.add_pp_effector("blur.ppe", 42069, true)
    elseif lv == 2 then
        -- raindrop
        level.add_pp_effector("raindrop.ppe", 42069, true)
    elseif lv == 3 then
        -- shock
        level.add_pp_effector("shock.ppe", 42069, true)
    elseif lv == 4 then
        -- surge_shock_old)
        level.add_pp_effector("surge_shock_old.ppe", 42069, true)
    elseif lv == 5 then
        level.add_pp_effector("surge_shock_old.ppe", 42069, true)
    end
end
-- Update the player's current health status based on their poisoning level.
function process_status()
    lv = determine_level()
    if current_level ~= lv then
        current_level = lv
        set_dehydration(lv)
        set_speed(lv)
        set_damage(lv)
        set_ppe(lv)
    end
    -- update health every tick
    if lv > 0 then
        if lv == 5 or (lv < 5 and db.actor.health > 0.01) then
            db.actor:change_health(damage_levels[lv])
        end
    end
end

function report_poisoning()
    local verb = tonumber(get_config("verbosity"))
    if verb == 1 then
        local lv = determine_level()
        news_manager.send_tip(db.actor, game.translate_string("st_poison_"..lv), nil, "swiss_knife", 6000)
    elseif verb == 2 then
        news_manager.send_tip(db.actor, game.translate_string("st_poison_verbose").. " "..poison_level, nil, "swiss_knife", 6000)

    end
end

function actor_on_sleep(hours)
    local change = hours * 10
    poison_level = clamp(poison_level - change, 0, 1000)
end

function actor_on_item_use(obj)
    local sec = obj:section()
    print_dbg("Consuming %s", sec)
    if cache[sec] then
        local id = obj:id()
        local val = cache[sec]
        print_dbg("Item has poison adding to queue %s, %s", val.ticks, val.amt)
        add_to_queue(id, val.ticks, val.amt)
    end
end

-- debug use
function set_level(val)
    if (get_config("dev") or false) then return end
    poison_level = val
end

function print()
    if (get_config("dev") or false) then return end
    printf("Poison level: %s", poison_level)
end

function on_key_press(key)
	local bind = dik_to_bind(key)
	if bind == key_bindings.kUSE and get_config("dev") then
        actor_menu.set_msg(1, "Poison level is ".. poison_level,3)
        printf("Poison level: %s", poison_level)
	end
end

MedicHeal = dialogs.heal_actor_injury
function dialogs.heal_actor_injury(a, b)
    MedicHeal(a, b)
    if get_config("doc") then
        print_dbg("healing poison")
        poison_level = 0
    end
end
MedicHealAll = dialogs.heal_actor_injury_radiation
function dialogs.heal_actor_injury_radiation(a, b)
    MedicHealAll(a, b)
    if get_config("doc") then
        print_dbg("healing poison")
        poison_level = 0
    end
end

function save_state(mdata)
    mdata.poison_level = poison_level
    mdata.food_queue = food_queue
end
function load_state(mdata)
    poison_level = mdata.poison_level or 0
    food_queue = mdata.food_queue or {}
end
function on_game_start()
    -- hydrate cache
    local ini_poison = ini_file("items\\settings\\toxins.ltx")
    local count = ini_poison:line_count("food_toxicity") or 0
    for i=0,count-1 do
        local result, id, value = ini_poison:r_line("food_toxicity" , i , "", "")
        values = str_explode(value, ",")
        cache[id] = {}
        cache[id].amt = tonumber(values[1])
        cache[id].ticks = tonumber(values[2])
    end
    
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("on_key_press", on_key_press)
    RegisterScriptCallback("actor_on_update", update)
    RegisterScriptCallback("actor_on_item_use", actor_on_item_use)
    RegisterScriptCallback("actor_on_sleep", actor_on_sleep)
end