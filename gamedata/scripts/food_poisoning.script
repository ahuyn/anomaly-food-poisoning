
local poison_level = 0
local food_queue = {}
local cache = {}
local TICK_DELAY = 6 -- 6 in game seconds or 1 irl second
get_config = food_poison_mcm.get_config
ini_poison = ini_file("items\\settings\\toxins.ltx")

function print_dbg(text, ...) 
    if get_config("dev") then
		printf("fp | %s | " .. text, time_global(), ...)
	end
end

function add_to_queue(id, values)
    if not food_queue[id] then food_queue[id] = dup_table(values) end
end

local prev_time
function update()
    local curr_time = game.get_game_time()
    if (prev_time == nil) then prev_time = curr_time end
    
    if (curr_time:diffSec(prev_time) > TICK_DELAY) then
        prev_time = curr_time
        process_queue()
        process_status()
    end

end

-- iterate queue and update poison level as appropriate
function process_queue()
    local to_apply = -0.001 -- base decay over time
    if not is_empty(food_queue) then
        for k,v in pairs(food_queue) do
            if v.ticks > 0 then
                v.ticks = v.ticks - 1
                to_apply = to_apply + v.amt
            else
                print_dbg("evicted from queue")
                food_queue[k] = nil 
                -- report_poisoning()
            end
        end
    end
    poison_level = clamp(poison_level + to_apply, 0, 1000)
    if get_config("bar") then
        update_hud()
    end
end

function add_to_queue(id, ticks, amt)
    food_queue[id] = {}
    food_queue[id].ticks = ticks
    food_queue[id].amt = amt
    return true
end

local current_level = -1
-- return level of food poisoning, 0-5

function determine_level()
    if poison_level < 100 then return 0 end
    local lv = clamp(poison_level - 100, 0, 1000)
    lv = math.floor(lv / 200)
    return lv + 1
end

-- set debuffs that change once per level
function set_debuffs(lv)
    print_dbg("Toxic level now at %s", lv)
    local sec = "toxic_"..lv
    -- process speed
    local speedmod = ini_poison:r_float_ex(sec, "speed")
    if speedmod then 
        speed.add_speed("sickness", speedmod, false, true)
    else 
        speed.remove_speed("sickness") 
    end
    
    -- process dehydration
    local thirst = ini_poison:r_float_ex(sec, "thirst")
    if thirst then 
        actor_status_thirst.set_thirst_tick(thirst)
    else
        actor_status_thirst.reset_thirst_tick()
    end
end

function set_hp(lv)
    local sec = "toxic_"..lv
    local threshold = ini_poison:r_float_ex(sec, "threshold") or 1
    local damage = ini_poison:r_float_ex(sec, "damage") or 0
    if db.actor.health > threshold then db.actor:change_health(damage) end
end

local last_time = 0
local applied = false
-- unlike the other tick this one fires every 1 irl second
-- base time interval, if poisoned, every 50-150% of this time will trigger a 1 second ppe
-- higher poison level reduces this interval size by 10%/level
local base_interval = 15000
local check_interval = 1000

function process_ppe(lv)
    
    local time = time_global()
    if time < last_time + check_interval then return end
    last_time = time
    local sec = "toxic_"..lv
    local ppe = ini_poison:r_string_ex(sec, "ppe")
    if applied or not ppe then 
        return
    else
        level.add_pp_effector(ppe, 42069, true)
        CreateTimeEvent("food_poisoning", "clear_ppe", math.random(3), remove_ppe, lv)
    end
end

function remove_ppe(lv)
    level.remove_pp_effector(42069)
    local to_add = (base_interval/2) + math.random(base_interval)
    to_add = math.floor(to_add * (1.1 - (0.1 * lv) ) )
    print_dbg("Adding next ppe at time %s", to_add)
    last_time = time_global() + to_add
    applied = false
    return true
end
-- Update the player's current health status based on their poisoning level.
function process_status()
    lv = determine_level()
    if current_level ~= lv then
        current_level = lv
        set_debuffs(lv)
    end
    -- manage hp
    set_hp(lv)
    -- update ppe if applicable
    process_ppe(lv)
end

function report_poisoning()
    local verb = tonumber(get_config("verbosity"))
    if verb == 1 then
        local lv = determine_level()
        news_manager.send_tip(db.actor, game.translate_string("st_poison_"..lv), nil, "swiss_knife", 6000)
    elseif verb == 2 then
        news_manager.send_tip(db.actor, game.translate_string("st_poison_verbose").. " "..poison_level, nil, "swiss_knife", 6000)

    end
end

function actor_on_sleep(hours)
    local change = hours * 10
    poison_level = clamp(poison_level - change, 0, 1000)
end

function actor_on_item_use(obj)
    local sec = obj:section()
    print_dbg("Consuming %s", sec)
    if cache[sec] then
        local id = obj:id()
        local val = cache[sec]
        print_dbg("Item has poison adding to queue %s, %s", val.ticks, val.amt)
        add_to_queue(id, val.ticks, val.amt)
        show_hud()
    end
end

-- debug use
function set_level(val)
    if (get_config("dev") or false) then return end
    poison_level = val
end

function print()
    if (get_config("dev") or false) then return end
    printf("Poison level: %s", poison_level)
end

function on_key_press(key)
	local bind = dik_to_bind(key)
	if bind == key_bindings.kUSE and get_config("dev") then
        actor_menu.set_msg(1, "Poison level is ".. poison_level,3)
        printf("Poison level: %s", poison_level)
	end
end

MedicHeal = dialogs.heal_actor_injury
function dialogs.heal_actor_injury(a, b)
    MedicHeal(a, b)
    if get_config("doc") then
        print_dbg("healing poison")
        poison_level = 0
    end
end
MedicHealAll = dialogs.heal_actor_injury_radiation
function dialogs.heal_actor_injury_radiation(a, b)
    MedicHealAll(a, b)
    if get_config("doc") then
        print_dbg("healing poison")
        poison_level = 0
    end
end

function save_state(mdata)
    mdata.poison_level = poison_level
    mdata.food_queue = food_queue
end
function load_state(mdata)
    poison_level = mdata.poison_level or 0
    food_queue = mdata.food_queue or {}
end

HUD = nil

function show_hud()
	if not HUD then
		HUD = UIToxicBar()
		get_hud():AddDialogToRender(HUD)
	end
	HUD:Display()
end

function update_hud()
	if not HUD then
		HUD = UIToxicBar()
		get_hud():AddDialogToRender(HUD)
	end
	HUD:UpdateValues()
end

class "UIToxicBar" (CUIScriptWnd)

function UIToxicBar:__init() super()
	self:InitControls()
end
function UIToxicBar:InitControls()
	local xml  = CScriptXmlInit()
	xml:ParseFile("ui_toxic_bar_haruka.xml")
	self.dialog = xml:InitStatic("toxic_bar", self)
	self.dialog:Show(false)
	self.toxic_icon = xml:InitStatic("toxic_bar:toxic_icon", self.dialog)
	self.toxic_bar = xml:InitProgressBar("toxic_bar:value", self.dialog)
	self.toxic_icon:Show(true)
	scale_ui(self.toxic_icon)
	self.toxic_bar:Show(true)
end

function UIToxicBar:Display()
	self.dialog:Show(true)
	CreateTimeEvent("haruka_clear_bar", "haruka_clear_bar", 5, function() 
		self:Clear()
		return true
	end)
	ResetTimeEvent("haruka_clear_bar","haruka_clear_bar",5)
end

function UIToxicBar:UpdateValues()
	self.toxic_bar:SetProgressPos(poison_level * 0.001)
end

function actor_on_net_destroy()
    if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end

function scale_ui(ele, adjust_x, anchor, anchor_point, parent_width)
	p_width = parent_width or 1024
	p_center = p_width/2
	width = ele:GetWidth()
	pos = ele:GetWndPos()
	anchorpos = {}
	anchorpos.left = pos.x
	anchorpos.right = anchorpos.left + width
	anchorpos.center = anchorpos.left + width/2
	ratio = (device().height / device().width) / (768 / 1024)
	xadjust = anchorpos.left
	if adjust_x then
		if anchor_point == "right" then
			xadjust = p_width - (p_width - (anchor and anchorpos[anchor] or anchorpos.left))*ratio
		elseif anchor_point == "center" then
			xadjust = p_center - (p_center - (anchor and anchorpos[anchor] or anchorpos.left))*ratio
		else
			xadjust = ratio * (anchor and anchorpos[anchor] or anchorpos.left)
		end
	end
	ele:SetWndSize(vector2():set(ele:GetWidth() * ratio, ele:GetHeight()))
	ele:SetWndPos( vector2():set(xadjust , pos.y ) )
end

function UIToxicBar:Clear()
	self.dialog:Show(false)
end

function on_game_start()
    -- hydrate cache
    local count = ini_poison:line_count("food_toxicity") or 0
    for i=0,count-1 do
        local result, id, value = ini_poison:r_line("food_toxicity" , i , "", "")
        values = str_explode(value, ",")
        cache[id] = {}
        cache[id].amt = tonumber(values[1])
        cache[id].ticks = tonumber(values[2])
    end

    applied = false
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("on_key_press", on_key_press)
    RegisterScriptCallback("actor_on_update", update)
    RegisterScriptCallback("actor_on_item_use", actor_on_item_use)
    RegisterScriptCallback("actor_on_sleep", actor_on_sleep)
    RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
end